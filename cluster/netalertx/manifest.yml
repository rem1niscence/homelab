apiVersion: v1
kind: Namespace
metadata:
  name: netalertx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: netalertx
  name: netalertx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: netalertx
  template:
    metadata:
      labels:
        app: netalertx
    spec:
      # To scan my home network, don't do this on a production environment
      hostNetwork: true
      nodeSelector:
        type: pi
      containers:
        - name: netalertx
          image: jokobsk/netalertx:latest
          ports:
            - containerPort: 20211
          env:
            - name: TZ
              value: Europe/Berlin
          volumeMounts:
            - name: config
              mountPath: /app/config
            - name: db
              mountPath: /app/db
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: config-pvc
        - name: db
          persistentVolumeClaim:
            claimName: db-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: netalertx
  name: config-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1G
  storageClassName: longhorn
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: netalertx
  name: db-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1G
  storageClassName: longhorn
---
apiVersion: v1
kind: Service
metadata:
  namespace: netalertx
  name: netalertx
spec:
  ports:
    - port: 80
      targetPort: 20211
  selector:
    app: netalertx
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: netalertx
  namespace: netalertx
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`netalertx.{{DOMAIN}}`)
      kind: Rule
      services:
        - name: netalertx
          port: 80
