apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-cloud
  namespace: vaultwarden
data:
  backup.sh: "#!/bin/bash\n\n# TODO: Fix repetition\n\n# Install dependencies\napt update\napt install -y jq\nnpm install -g @bitwarden/cli\n\nemail=$EMAIL\npassword=$PASSWORD\nbackup_folder=\"/backup\"\n\nmkdir -p $backup_folder\n\nbw config server http://vaultwarden.vaultwarden\n\necho \"Performing login...\"\nbw login $email $password --method 0 --quiet\n\nif [[ $(bw status | jq -r .status) == \"unauthenticated\" ]]\nthen \n    echo \"ERROR: Failed to authenticate on vaultwarden\"\n    exit 1\nfi\n\n# unlock the vault\nsession_key=$(bw unlock $password --raw)\n\n# verify that unlock succeeded\nif [[ $session_key == \"\" ]]\nthen \n    echo \"ERROR: Failed to authenticate.\"\n    exit 1\nelse\n    echo \"Login successful.\"\nfi\n\n#Export the session key as an env variable (needed by BW CLI)\nexport BW_SESSION=\"$session_key\" \n\necho \"exporting vault\"\nbw export --format json --output $backup_folder/backup.json\n\necho\necho \"cloud import complete.\"\n\nbw logout\n\necho\necho \"logging into bitwarden cloud\"\n\nbw config server https://bitwarden.com\n\nbw login $email $password --method 0 --quiet\n\nif [[ $(bw status | jq -r .status) == \"unauthenticated\" ]]\nthen \n    echo \"ERROR: Failed to authenticate on bitwarden\"\n    exit 1\nfi\n\nsession_key=$(bw unlock $password --raw)\n\n# verify that unlock succeeded\nif [[ $session_key == \"\" ]]\nthen \n    echo \"ERROR: Failed to authenticate.\"\n    exit 1\nelse\n    echo \"Login successful.\"\nfi\n\nexport BW_SESSION=\"$session_key\" \n\necho \"importing backup to cloud\"\nbw import bitwardenjson $backup_folder/backup.json\n\necho \"backup complete\"\n\nrm -rf $backup_folder\n\nbw lock\necho\n"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-cloud
  namespace: vaultwarden
spec:
  # schedule: "45 8 * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          nodeSelector:
            type: main
          containers:
            - name: backup-cloud
              image: node:slim
              command: ["/bin/bash", "/scripts/backup.sh"]
              envFrom:
                - secretRef:
                    name: backup-cloud
              volumeMounts:
                - name: script
                  mountPath: /scripts
          volumes:
            - name: script
              configMap:
                name: backup-cloud
