# TODO: Review this, don't remember if is still working
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-script
  namespace: vaultwarden
data:
  backup.sh: |
    #!/bin/bash

    # Install dependencies
    apt update
    apt install -y jq
    npm install -g @bitwarden/cli

    email=$EMAIL
    password=$PASSWORD
    encryption_password=$ENCRYPTION_PASSWORD
    backup_root=$BACKUP_ROOT
    backup_folder=$backup_root/$BACKUP_FOLDER
    attachments_folder=$backup_root/$ATTACHMENTS_FOLDER

    if [ -z "$ENCRYPTION_PASSWORD" ] || [ -z "$BACKUP_FOLDER" ] || [ -z "$ATTACHMENTS_FOLDER" ]; then
        echo "Error: One or more of the required environment variables" \
            "(ENCRYPTION_PASSWORD, SAVE_FOLDER, ATTACHMENTS_FOLDER) are not set."
        exit 1
    fi

    bw config server http://vaultwarden.vaultwarden
    echo "Starting export script..."

    if [[ $(bw status | jq -r .status) == "unauthenticated" ]]; then 
        echo "ERROR: Failed to authenticate."
        bw status
        echo
        exit 1
    fi

    # Unlock the vault
    session_key=$(bw unlock $password --raw)

    # Verify that unlock succeeded
    if [[ $session_key == "" ]]; then 
        echo "ERROR: Failed to authenticate."
        echo
        exit 1
    else
        echo "Login successful."
        echo
    fi

    # Export the session key as an env variable (needed by BW CLI)
    export BW_SESSION="$session_key"
    echo "Performing vault exports..."

    # 1. Export the personal vault 
    if [[ ! -d "$backup_folder" ]]; then
        echo "ERROR: Could not find the folder in which to save the files."
        echo
        exit 1
    fi

    echo 
    echo "Exporting personal vault to a password-encrypted folder $backup_folder"
    bw export --format encrypted_json --password $encryption_password --output $backup_folder/vaultwarden.json

    # Perform attachments backup
    if [[ $(bw list items | jq -r '.[] | select(.attachments != null)') != "" ]]; then
        echo
        echo "Saving attachments..."
        bash <(bw list items | jq -r '.[] \
            | select(.attachments != null) \
            | "bw get attachment \"\(.attachments[].fileName)\" --itemid \(.id) --output \"'$attachments_folder'\(.name)/\""')
    fi

    echo
    echo "vault export complete."
    bw lock 
    echo
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-local
  namespace: vaultwarden
spec:
  # schedule: "14 15 * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          nodeSelector:
            type: main
          containers:
            - name: backup-local
              image: node:slim
              command: ["/bin/bash", "/scripts/backup.sh"]
              envFrom:
                - secretRef:
                    name: backup-local
              volumeMounts:
                - name: backup
                  mountPath: /vaultwarden
                - name: script
                  mountPath: /scripts
          volumes:
            - name: backup
              persistentVolumeClaim:
                claimName: backup-pvc
            - name: script
              configMap:
                name: backup-script
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: vaultwarden-backup-data-pv
spec:
  capacity:
    storage: 1G
  accessModes:
    - ReadWriteMany
  nfs:
    server: 192.168.0.95
    path: /mnt/main_drive/vaultwarden
  storageClassName: local-path
  mountOptions:
    - vers=4.0
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: vaultwarden
  name: backup-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1G
  volumeName: vaultwarden-backup-data-pv
  storageClassName: local-path
