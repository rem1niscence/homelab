http:
  routers:
  # Basically, I want homarr to be the homepage but both homar and traefik internal urls do their api
  # calls with /api as a prefix ðŸ¤¡ðŸ¤¡ðŸ¤¡. In order to not step on the toes of each I had to manually set
  # their routes api routes. Will continue updating when I have more 404s.
    homarr:
      rule: Host(`{{ env "DOMAIN" }}`)
      service: homarr
      priority: 1
      tls:
        certResolver: tsresolver
    homar-docker-api:
      rule: Host(`{{ env "DOMAIN" }}`) && (PathPrefix(`/api/docker/`) || PathPrefix(`/api/config`))
      service: homarr
      priority: 3
      tls:
        certResolver: tsresolver
    traefik:
      rule: Host(`{{ env "DOMAIN" }}`) && (PathPrefix(`/traefik`) || PathPrefix(`/api`))
      priority: 2
      service: "api@internal"
      middlewares:
        - strip-prefix      
      tls:
        certResolver: "tsresolver"
    portainer:
      rule: Host(`{{ env "DOMAIN" }}`) && PathPrefix(`/portainer`)
      service: portainer
      middlewares:
        - strip-prefix
      tls:
        certResolver: tsresolver
    grafana:
      rule: Host(`{{ env "DOMAIN" }}`) && PathPrefix(`/grafana`)
      service: grafana
      middlewares:
        - strip-prefix
      tls:
        certResolver: tsresolver
    pihole:
      rule: Host(`{{ env "DOMAIN" }}`) && PathPrefix(`/pihole`)
      service: pihole
      middlewares:
        - strip-prefix
      tls:
        certResolver: tsresolver
    torrent:
      rule: Host(`{{ env "DOMAIN" }}`) && PathPrefix(`/torrent`)
      service: torrent
      middlewares:
        - strip-prefix
      tls:
        certResolver: tsresolver  
    jellyfin:
      rule: Host(`{{ env "DOMAIN" }}`) && PathPrefix(`/jellyfin`)
      service: jellyfin
      tls:
        certResolver: tsresolver
    umami:
      rule: Host(`{{ env "DOMAIN" }}`) && PathPrefix(`/umami`)
      service: umami
      tls:
        certResolver: tsresolver

  services:
    portainer:
      loadBalancer:
        servers:
          - url: 'http://portainer:9000'
    grafana:
      loadBalancer:
        servers:
          - url: 'http://grafana:3000'
    pihole:
      loadBalancer:
        servers:
          - url: 'http://pihole:80'
    torrent:
      loadBalancer:
        servers:
          - url: 'http://qbittorrent:8080'
    umami:
      loadBalancer:
        servers:
          - url: 'http://umami:3000'    
    jellyfin:
      loadBalancer:
        servers:
          - url: 'http://jellyfin:8096'
    homarr:
      loadBalancer:
        servers:
          - url: 'http://homarr:7575'

  middlewares:
    strip-prefix:
      stripPrefix:
        prefixes:
          - /portainer
          - /grafana
          - /pihole
          - /torrent
          - /traefik
    # api-strip-prefix:
    #   stripPrefix:
    #     prefixes:
    #       - /api    # auth:
    #   basicAuth:
    #     users:
    #       - 'pi-admin:$apr1$pAYi7oll$NQR6hcTYFfIqBpnzpPBL91'
